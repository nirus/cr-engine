[{"slug":"apollo-graphql-client-abort-pending-requests","category":"blog","title":"Apollo GraphQL Client – Abort pending requests","description":"Article about using Abort signal to stop ongoing Apollo GraphQL request","tags":["javascript","GraphQL"],"body":"### Quick intro to Apollo GraphQL\n\n> Apollo is the industry-standard GraphQL implementation, providing the data graph layer that connects modern apps to the cloud.\n> <div class=\"quote-credit\"><a target=\"_blank\" href=\"https://www.apollographql.com/\">Apollo GraphQL</a></div>\n\n\nIn this tutorial we will understand the integration of [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController), a JavaScript API with Apollo GraphQL Client using a fullstack ReactJs sample project.\n\n### Motivation for this post\n\nIt all started with a use case to prevent client from making a repeated request for the same GraphQL mutation query.\nAll the code inspired in this blog post is from a [GitHub issue thread](https://github.com/apollographql/apollo-feature-requests/issues/40) (***Read more for interesting discussion …***)\n\nWith that intro, lets understand how the solution is engineered for this topic.\n\n### Libraries used:\n\n- [UUID](https://www.npmjs.com/package/uuid) – Used to create unique request tracker ID and prevent namespace collision for multiple request from same component.\n- [ReactJS](http://reactjs.org/) – No intro needed i guess?\n- [Apollo GraphQL](https://www.apollographql.com/) – Follow the link to know more..\n\n\n### Source code\n\nAll the code cited in this blogpost is documented in a [Github repository](https://github.com/nirus/fullstack-tutorial) (***full POC source code***) by forking the react project from the [Apollo GraphQL fullstack](https://github.com/apollographql/fullstack-tutorial) repo.\n\n<div align=\"center\" class=\"font-semibold\"><h3>Code walkthrough</h3></div>\n\n#### Step – 1:\nCreate a middleware that holds the logic to track and cancel duplicate request via [ReactJS context](https://reactjs.org/docs/context.html) API – [***cancelRequest.tsx***](https://github.com/nirus/fullstack-tutorial/blob/master/final/client/src/cancelRequest.ts) (***complete source code***)\n\n#### Step – 2:\nGenerate namespace UUID and pass it using [requestTrackerId](https://github.com/nirus/fullstack-tutorial/blob/master/final/client/src/pages/login.tsx#L32) via query context as below.\n\n```js\ncontext:{ \n  requestTrackerId: uuidNameSpace('LOGIN', RequestNameSpace) \n}\n```\n\n#### Step – 3:\nFinally wiring all the middlewares and setup it up as funnel layers using from API of Apollo GraphQL client and set [queryDeduplication](https://www.apollographql.com/docs/react/v2.5/advanced/network-layer/#query-deduplication) to **false**.\n\n```js\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n    cache,\n    link: from([ authMiddleware, cancelRequestLink, httpLink ]),\n    queryDeduplication: false\n});\n```\n\n### Mechanism of action\n\nWhen ever more than one request originates from the same mutation query, each query is tagged to its **requestTrackerId** which remains same to that particular query and different for other queries.\n\nUsing [UUID library](https://www.npmjs.com/package/uuid) namespace is generated for each query (***Read the code***). With this ID the middleware associates each query to its namespace generated ID and stored it in a cache object.\n\nSubsequent incoming request are looked up using the cache object. If there’s an ongoing request which is not yet completed, it will be aborted immediately using [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) javascript API and this request is replaced with new request.\n\n### How to run the demo?\nFollow the steps stated in [readme](https://github.com/nirus/fullstack-tutorial/blob/master/README.md#installation) file from the Github repo for installation.\n\n### Code modifications done for demoing\nI have intentionally introduced a response delay of 5000ms in Login API (server code) to make [this](https://github.com/nirus/fullstack-tutorial) POC work.\n\nClick repeatedly on **login button** and you can see the previous request getting cancelled in the **Chrome – Developer console > Network**.\n\n<h3 align=\"center\">See the demo video below</h3>\n<video controls playsinline src=\"https://github.com/nirus/fullstack-tutorial/blob/master/apollo-request-cancel.mp4?raw=true\"></video>\n\n> Thank you. If you have come to the end of this blog, please leave a comment below and share this blog in your social feed."},{"slug":"reverse-engineering-popunder-js-chrome","category":"blog","title":"Reverse engineering Popunder.js – Chrome","description":"This article talks about the reverse engineering popunder.js","tags":["javascript","reverse engineering"],"body":"### Where it all started?\n\nIt all started with a Youtube video by [@LiveOverflow](https://twitter.com/LiveOverflow), which is awesome by the way. This video talk is on a bit older version of [Popunder.js](https://popunderjs.com/).\n\nMotivated & intrigued to checkout current version of popunder.js and reverse engineer to understand its engine.\n\nTo begin with, I cloned the demo site to my local machine, changed few parts to point my localhost (<i>a simple code change</i>). It consists of 5 files, out of which **script.js** is the heart of the engine payload.\n\nFirst thing that caught my eye was the defensive code against **Debugger tools**. \n\n### Defensive Method – 1\n\n```js\nvar element = document.createElement('div');\nelement.__defineGetter__('id', function() {\n  window.devToolsEnabled = _true;\n});\n\nwindow.console.log(element);\nwindow.console.clear();\n```\n\nWhenever a created element is printed onto the console, javascript engine reads the **id** of the element printed in-turn invoking the **getter** function defined by user. [StackOverflow](https://stackoverflow.com/a/36391435/1848109) post talks about this behavior used by coders to detect if the debugger is opened or not. **Chrome (74.0.3729.131)** and **Safari(12.1)** both execute **fake getter functions**, interestingly Mozilla Firefox was immune to this.\n\n### Defensive Method – 2 (dead code in library)\nCheck if a function is proxied or not. If you have watched [@LiveOverflow](https://twitter.com/LiveOverflow) video’s on the Youtube , he wrote a proxy function for `window.open` to catch the execution of the popunder.js which uses this JS API to open popup in the browser.\n\n<h3 align=\"center\">Code extract – (Read inline comments)</h3>\n\n```js\n_isFunctionProxied: function(fnName) {\n     var regex, fn, name;\n\n     /* Extracts function name */\n     fn = Utils._evaluate(fnName);\n     name = fnName.replace(/^(?:.*[^\\w])*([\\w]+)\\s*$/i, '$1');\n     try {\n       n7.u9(2);\n       /* Creates a regex to check string \"{ [native code] }\" */\n       regex = new RegExp(n7.c9('function ', name, '\\\\(\\\\)\\\\s* .{\\\\s*\\\\[\\\\s*native code\\\\s*\\\\]\\\\s*}'), 'im');\n\n       /* Execute the regex and determine if proxied */\n       return !regex.test(fn.toString());\n     } catch (err) {\n        if (err.toString().indexOf('is not a function') > -1) {\n            return _true;\n        }\n        if (Browser._isFirefox) {\n            return _true;\n        }\n        return _false;\n     }\n}\n```\n\nNext, i started reading the code line by line. There were bunch of helper API’s and stuff. Interesting section was the block of code that were written to target  specific browser’s & its version, thus exploiting the flaws to open pop-up which is the library’s goal.\n\nBelow are options available for popups to be opened **(Extract of SwitchCase)**\n\n```js\nswitch (type) {\n    case 'popup':\n        popOpts = {\n            newTab: false,\n            under: false\n        };\n        break;\n\n    case 'tabunder':\n        popOpts = {\n            newTab: true,\n            under: true\n        };\n        break;\n\n    case 'tabup':\n        popOpts = {\n            newTab: true,\n            under: false\n        };\n        break;\n\n    default:\n        popOpts = {};\n}\n```\n\n### Chrome\nThanks to **@LiveOverFlow**, filing bug report with Chromium which eliminated the **popunder** option, now this option defaults to tabunder only on Chrome. Watch [this](https://www.youtube.com/watch?v=PPzRcZLNCPY) video for more details by **@LiveOverFlow**. You will realize its an art to exploit a flaw for your own gain.\n\nThere was this interesting option called **tricksChrome** which is a boolean flag that ignites a `ChromeDance()` function on the `about:blank` window thats opened on main `window.onClick()` event trigger.\n\n<h3 align=\"center\">Refactored Code from Popunder library - <a href=\"https://jsfiddle.net/xvmp45we/\" target=\"_blank\">Jsfiddle link</a></h3>\n\n```js\nwindow.onclick = function () {\n  var w = window.open('about:blank', 'sdffdfds', 'top=9999,left=0,width=100,height=100');\n  var popUrl = \"https://coder.rocks\";\n  var left = 0;\n  w.document.write(`<script>\n  var run = 0;\n  var left = 0;\n  function dance() {\n    if (run > 0){\n      return;\n    }\n    run = 1;\n\n    setInterval(function () {\n      if (screenY > 100) \n        window.moveTo(0, 0);\n      else \n        window.moveTo(left, 9999)\n    }, 20)\n  }\n\n  setTimeout(function () {\n    var oldX = screenX, oldY = screenY,\n      c = setInterval(function () {\n        if (oldX != screenX || oldY != screenY) {\n          clearInterval(c); \n          dance();\n        } \n        oldX = screenX; \n        oldY = screenY;\n      }, 50);\n  }, 50);\n\n  /*This annoys the user to put popup window in the background*/\n  document.onmousemove = dance; \n\n  function finish() {\n    window.moveTo(0, 0);\n    window.resizeTo(${screen.width}, ${screen.height});\n    window.location.href = \"${popUrl}\";\n  }\n\n  /* when put in background load the target site */\n  window.onblur = finish;\n  setTimeout(finish, 5 * 60e3);\n\n  <\\/script>`);\n}\n```\n\n**Voilla!** Now you have a successful popup tricking the user.\nTechnically it’s not a bug, but its beautifully thought through to trick the user.\n\n<h3 align=\"center\">Code extract</h3>\n\n```js\nmap.push([this._PostMessage, function() {\n   return Browser._isChrome && Browser._version >= 64 && Browser._version < 67;\n}]);\nmap.push([this._PDFViewer, function() {\n   return Browser._isChrome && Utils._isPDFViewerEnabled() && Browser._isWin && Browser._version >= 43 && Browser._version < 64;\n}]);\n map.push([this._PDFTabUnder, function() {\n   return Browser._isChrome && Utils._isPDFViewerEnabled() && Browser._isMac && Browser._version >= 49 && Browser._version < 64;\n}]);\n```\n\nNext section of code is a check for the vulnerable browser versions to exploit (<i>influenced by @LiveOverflow’s reverse engineering disclosure’s</i>), like the `window.postMessage` trick that is available in **Chrome ver 68** and below, PDF as an embedded object to gain focus etc.\n\nFor all these vulnerabilities & explanation on older version, I would highly recommend to watch [@LiveOverflow](https://www.youtube.com/c/LiveOverflow) videos on Youtube.\n\n> Let me know what you think. I would be happy to listen to your feedback."},{"slug":"storybook-js-custom-webpack-setup-for-scss","category":"blog","title":"Storybook.js custom Webpack setup for SASS","description":"This article is about creating a storybook webpack custom configuration to include common SCSS or SASS variables in all the stories","tags":["javascript","storybook js"],"body":"## What is Storybook ?\n[Storybook](https://storybook.js.org/) is an open source tool for developing UI components in isolation for React, Vue, and Angular. It makes building stunning UIs organized and efficient.\n\n### Now let’s move straight to the custom webpack config\n[Link](https://storybook.js.org/docs/configurations/custom-webpack-config/#docs-content) from the storybook documentation explains the custom configuration for the webpack. But wait! it doesn’t work if you do as explained in the documentation (Bummer!). I have logged an issue explaining this.\n\nIssue has two parts to it. One explaining about their default documentation and another one that partially works using **MiniCssExtractPlugin**. Visit the issue [here](https://github.com/storybookjs/storybook/issues/11052) to know more, detailed info on what i am talking about.\n\n<h2 align=\"center\">Now back to the topic</h2>\n\n**Goal use case** – To implement a **common SCSS constants** to be used across the stories (colors.scss, utils.scss) without repetitive imports inside individual stories.\n\nSo besides the issue i spoke earlier, i had to do a work around to get the project moving with the above goal.\n\n### Final woking solution (hours of effort!)\n\nFinally i solved it by using [sass-resources-loader](https://www.npmjs.com/package/sass-resources-loader) to load the common SCSS constants by mutating config object. Below is my working webpack configuration for my storybook.\n\n```js\nwebpackFinal: async (config, { configType }) => {\n    // `configType` has a value of 'DEVELOPMENT' or 'PRODUCTION'\n    // You can change the configuration based on that.\n    // 'PRODUCTION' is used when building the static version of storybook.\n\n    config.module.rules.map((rule) => {\n      if (rule.oneOf) {\n        rule.oneOf = rule.oneOf.slice().map((subRule) => {\n          if (subRule.test instanceof RegExp && subRule.test.test('.scss')) {\n            return {\n              ...subRule,\n              use: [\n                ...subRule.use,\n                {\n                  loader: require.resolve('sass-resources-loader'),\n                  options: {\n                    resources: [\n                      path.resolve(__dirname, '../src/styles/_common.scss')\n                    ]\n                  }\n                }\n              ],\n            }\n          }\n          return subRule;\n        });\n      }\n      return rule;\n    });\n    return config;\n  },\n```\n\nFull working project with above config can be found on [GitHub](https://github.com/nirus/storybook-issue/tree/work-arround) & this [link](https://github.com/nirus/storybook-issue/blob/597a4df091362dbd61422d7033ef210bdd146f20/.storybook/main.js#L13) for the webpack configuration.\n\n### What exactly did we do?\n- Run a map (loop) on the incoming config object inside webpackFinal method.\n- Check for default [oneOf](https://webpack.js.org/configuration/module/#ruleoneof) rule set for ***.scss*** file.\n- Inject our file of interest ie., ***_common.scss***.\n- Voila we have successfully injected our config!\n\n## Feedback\n> Let me know your thoughts and any solutions that you encountered. I will be happy to include with this article."}]