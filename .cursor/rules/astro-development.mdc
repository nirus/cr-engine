---
description: 
globs: 
alwaysApply: false
---
# Astro Development Guidelines

## Key Principles
- Write concise, technical responses with accurate Astro examples
- Leverage Astro's partial hydration and multi-framework support effectively
- Prioritize static generation and minimal JavaScript for optimal performance
- Use descriptive variable names and follow Astro's naming conventions
- Organize files using Astro's file-based routing system
- use yarn for package management

## Project Structure
This project follows the recommended Astro structure:
- [src/](mdc:src) - Main source code
  - [components/](mdc:src/components) - Reusable Astro components
  - [layouts/](mdc:src/layouts) - Page layouts and templates
  - [pages/](mdc:src/pages) - File-based routing pages
  - [styles/](mdc:src/styles) - Global styles and CSS
  - [utils/](mdc:src/utils) - Utility functions and helpers
  - [config/](mdc:src/config) - Configuration files
- [public/](mdc:public) - Static assets
- [astro.config.mjs](mdc:astro.config.mjs) - Astro configuration
- [tailwind.config.js](mdc:tailwind.config.js) - Tailwind CSS configuration
- [package.json](mdc:package.json) - Dependencies and scripts

## Component Development
- Create `.astro` files for Astro components in [src/components/](mdc:src/components)
- Use framework-specific components (React, Vue, Svelte) when necessary
- Implement proper component composition and reusability
- Use Astro's component props for data passing
- Leverage Astro's built-in components like `<Markdown />` when appropriate

## Routing and Pages
- Utilize Astro's file-based routing system in [src/pages/](mdc:src/pages)
- Implement dynamic routes using `[...slug].astro` syntax
- Use `getStaticPaths()` for generating static pages with dynamic routes
- Implement proper 404 handling with a `404.astro` page

## Content Management
- Use Markdown (`.md`) or MDX (`.mdx`) files for content-heavy pages
- Leverage Astro's built-in support for frontmatter in Markdown files
- Implement content collections for organized content management
- This project includes a custom posts system in [src/posts-astro-code/](mdc:src/posts-astro-code)

## Styling with Tailwind CSS
- This project uses Tailwind CSS v4 with [@tailwindcss/vite](mdc:package.json)
- Use Tailwind utility classes extensively in your Astro components
- Leverage Tailwind's responsive design utilities (`sm:`, `md:`, `lg:`, etc.)
- Utilize Tailwind's color palette and spacing scale for consistency
- Never use the `@apply` directive
- Configure custom theme extensions in [tailwind.config.js](mdc:tailwind.config.js) when necessary

## Performance Optimization
- Minimize use of client-side JavaScript; leverage Astro's static generation
- Use the `client:*` directives judiciously for partial hydration:
  - `client:load` for immediately needed interactivity
  - `client:idle` for non-critical interactivity
  - `client:visible` for components that should hydrate when visible
- Implement proper lazy loading for images and other assets
- Utilize Astro's built-in asset optimization features

## Data Fetching
- Use `Astro.props` for passing data to components
- Implement `getStaticPaths()` for fetching data at build time
- Use `Astro.glob()` for working with local files efficiently
- Implement proper error handling for data fetching operations

## SEO and Meta Tags
- Use Astro's `<head>` tag for adding meta information
- Implement canonical URLs for proper SEO
- Use the `<SEO>` component pattern for reusable SEO setups
- This project includes sitemap generation via [@astrojs/sitemap](mdc:package.json)

## Integrations and Plugins
- This project uses several custom plugins in [plugins/](mdc:plugins)
- Utilize Astro integrations for extending functionality
- Implement proper configuration for integrations in [astro.config.mjs](mdc:astro.config.mjs)
- Use Astro's official integrations when available for better compatibility

## Build and Deployment
- Optimize the build process using `yarn run build` script
- Implement proper environment variable handling for different environments
- Use static hosting platforms compatible with Astro (Netlify, Vercel, etc.)
- Implement proper CI/CD pipelines for automated builds and deployments

## Testing
- Implement unit tests for utility functions and helpers
- Use end-to-end testing tools like Cypress for testing the built site
- Implement visual regression testing if applicable

## Accessibility
- Ensure proper semantic HTML structure in Astro components
- Implement ARIA attributes where necessary
- Ensure keyboard navigation support for interactive elements

## Key Conventions
1. Follow Astro's Style Guide for consistent code formatting
2. Use TypeScript for enhanced type safety and developer experience
3. Implement proper error handling and logging
4. Leverage Astro's RSS feed generation for content-heavy sites
5. Use Astro's Image component for optimized image delivery

## Performance Metrics
- Prioritize Core Web Vitals (LCP, FID, CLS) in development
- Use Lighthouse and WebPageTest for performance auditing
- Implement performance budgets and monitoring

## Development Workflow
- Use `yarn run dev` for development server
- Use `yarn run build` for production builds
- Use `yarn run preview` to preview production builds
- Use `yarn run prettier:write` for code formatting
- This project includes Husky pre-commit hooks for code quality

## Custom Features
- Custom markdown processing with claim middleware
- Custom tag transformation for enhanced content
- Posts bundle processing for content management
- Search indexing functionality via [scripts/search-indexer/](mdc:scripts/search-indexer)
- Symlink repository management for external content

Refer to Astro's official documentation for detailed information on components, routing, and integrations for best practices.
